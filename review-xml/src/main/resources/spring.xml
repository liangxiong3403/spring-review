<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--<props:property-placeholder location="classpath:jdbc.properties"/>-->

    <!--<context:property-placeholder location="classpath:jdbc.properties"/>-->

    <!-- The use of <context:component-scan> implicitly enables the functionality of
        <context:annotation-config>. There is usually no need to include the
        <context:annotation-config> element when using <context:component-scan>. -->
    <!--<context:annotation-config/>-->

    <context:component-scan base-package="org.liangxiong.demo.spring">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 开启 load-time weaving;可以使用@EnableLoadTimeWeaving替代 -->
    <context:load-time-weaver/>

    <!-- 开启aspectj -->
    <aop:aspectj-autoproxy/>

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <value>classpath:${diy.property.location:config}/jdbc.properties</value>
        </property>
        <property name="properties">
            <value>custom.datasource.class=org.apache.commons.dbcp2.BasicDataSource</value>
        </property>
    </bean>

    <bean id="dataSource" class="${custom.datasource.class}" destroy-method="close"
          p:url="jdbc:mysql://localhost:3306/test?useSSL=false" p:username="root" p:password="admin"
          p:driverClassName="com.mysql.cj.jdbc.Driver"/>

    <bean id="dataSource2" class="${custom.datasource.class}" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>format</value>
                <value>exceptions</value>
                <value>windows</value>
            </list>
        </property>
    </bean>

    <!-- 构造实例 -->
    <bean id="loadTimeWeaverHelper" class="org.liangxiong.demo.spring.component.LoadTimeWeaverHelper">
        <property name="messageSource" ref="messageSource"/>
    </bean>

    <!-- 数据校验 -->
    <bean id="userValidator" class="org.liangxiong.demo.spring.component.UserValidator">
        <constructor-arg name="addressValidator" ref="addressValidator"/>
    </bean>

    <!-- 地址校验 -->
    <bean id="addressValidator" class="org.liangxiong.demo.spring.component.AddressValidator"/>

    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>

    <!-- 性别校验 -->
    <bean id="genderConstraintValidator" class="org.liangxiong.demo.spring.component.GenderConstraintValidator"/>

    <!-- 声明aspect -->
    <bean id="userAspect" class="org.liangxiong.demo.spring.aop.UserAspect"/>

    <aop:config>
        <!-- 用户业务操作 -->
        <aop:pointcut id="serviceOperation"
                      expression="execution(* org.liangxiong.demo.spring.service..*.*(..))"/>
        <!-- 事务配置切面 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation"/>
        <!-- 吃饭前行为 -->
        <aop:aspect id="eatAspectBefore" ref="userAspect">
            <aop:before method="washHands" pointcut-ref="userServiceBefore"/>
            <aop:pointcut id="userServiceBefore"
                          expression="execution(* org.liangxiong.demo.spring.service.impl.*.eat(..))"/>
        </aop:aspect>
        <!-- 吃饭后行为 -->
        <aop:aspect id="eatAspectAfter" ref="userAspect">
            <aop:after-returning method="walk" pointcut-ref="userServiceAfter"/>
            <aop:pointcut id="userServiceAfter"
                          expression="execution(* org.liangxiong.demo.spring.service.impl.*.eat(..))"/>
        </aop:aspect>
    </aop:config>
    <!-- 事务管理器 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 事务行为 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="*" no-rollback-for="UnsupportedOperationException"/>
        </tx:attributes>
    </tx:advice>

    <import resource="service/service.xml"/>

</beans>
